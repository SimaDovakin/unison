[
  {
    "name": "luhn.isValid.tests.ex1",
    "test_code": "expect (false == luhn.isValid \"1\")\n    |> Test.label \"single digit strings can not be valid\""
  },
  {
    "name": "luhn.isValid.tests.ex2",
    "test_code": "expect (false == luhn.isValid \"0\")\n    |> Test.label \"a single zero is invalid\""
  },
  {
    "name": "luhn.isValid.tests.ex3",
    "test_code": "expect (true == luhn.isValid \"059\")\n    |> Test.label \"a simple valid SIN that remains valid if reversed\""
  },
  {
    "name": "luhn.isValid.tests.ex4",
    "test_code": "expect (true == luhn.isValid \"59\")\n    |> Test.label \"a simple valid SIN that becomes invalid if reversed\""
  },
  {
    "name": "luhn.isValid.tests.ex5",
    "test_code": "expect (true == luhn.isValid \"055 444 285\")\n    |> Test.label \"a valid Canadian SIN\""
  },
  {
    "name": "luhn.isValid.tests.ex6",
    "test_code": "expect (false == luhn.isValid \"055 444 286\")\n    |> Test.label \"invalid Canadian SIN\""
  },
  {
    "name": "luhn.isValid.tests.ex7",
    "test_code": "expect (false == luhn.isValid \"8273 1232 7352 0569\")\n    |> Test.label \"invalid credit card\""
  },
  {
    "name": "luhn.isValid.tests.ex8",
    "test_code": "expect (false == luhn.isValid \"1 2345 6789 1234 5678 9012\")\n    |> Test.label \"invalid long number with an even remainder\""
  },
  {
    "name": "luhn.isValid.tests.ex9",
    "test_code": "expect (false == luhn.isValid \"1 2345 6789 1234 5678 9013\")\n    |> Test.label \"invalid long number with a remainder divisible by 5\""
  },
  {
    "name": "luhn.isValid.tests.ex10",
    "test_code": "expect (true == luhn.isValid \"095 245 88\")\n    |> Test.label \"valid number with an even number of digits\""
  },
  {
    "name": "luhn.isValid.tests.ex11",
    "test_code": "expect (true == luhn.isValid \"234 567 891 234\")\n    |> Test.label \"valid number with an odd number of spaces\""
  },
  {
    "name": "luhn.isValid.tests.ex12",
    "test_code": "expect (false == luhn.isValid \"059a\")\n    |> Test.label \"valid strings with a non-digit added at the end become invalid\""
  },
  {
    "name": "luhn.isValid.tests.ex13",
    "test_code": "expect (false == luhn.isValid \"055-444-285\")\n    |> Test.label \"valid strings with punctuation included become invalid\""
  },
  {
    "name": "luhn.isValid.tests.ex14",
    "test_code": "expect (false == luhn.isValid \"055# 444$ 285\")\n    |> Test.label \"valid strings with symbols included become invalid\""
  },
  {
    "name": "luhn.isValid.tests.ex15",
    "test_code": "expect (false == luhn.isValid \" 0\")\n    |> Test.label \"single zero with space is invalid\""
  },
  {
    "name": "luhn.isValid.tests.ex16",
    "test_code": "expect (true == luhn.isValid \"0000 0\")\n    |> Test.label \"more than a single zero is valid\""
  },
  {
    "name": "luhn.isValid.tests.ex17",
    "test_code": "expect (true == luhn.isValid \"091\")\n    |> Test.label \"input digit 9 is correctly converted to output digit 9\""
  },
  {
    "name": "luhn.isValid.tests.ex18",
    "test_code": "expect (true == luhn.isValid \"9999999999 9999999999 9999999999 9999999999\")\n    |> Test.label \"very long input is valid\""
  },
  {
    "name": "luhn.isValid.tests.ex19",
    "test_code": "expect (true == luhn.isValid \"109\")\n    |> Test.label \"valid luhn with an odd number of digits and non zero first digit\""
  },
  {
    "name": "luhn.isValid.tests.ex20",
    "test_code": "expect (false == luhn.isValid \"055b 444 285\")\n    |> Test.label \"using ascii value for non-doubled non-digit isn't allowed\""
  },
  {
    "name": "luhn.isValid.tests.ex21",
    "test_code": "expect (false == luhn.isValid \":9\")\n    |> Test.label \"using ascii value for doubled non-digit isn't allowed\""
  },
  {
    "name": "luhn.isValid.tests.ex22",
    "test_code": "expect (false == luhn.isValid \"59%59\")\n    |> Test.label \"non-numeric, non-space char in the middle with a sum that's divisible by 10 isn't allowed\""
  }
]
